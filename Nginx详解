简介：Nginx为轻量级高并发服务器（区别于Apache），Http服务器和反向代理；也可以是IMAP、POP3、SMTP代理服务器


正向代理：位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标（原始服务器），然后代理向原始服务器转交请求并将获得的内容返回客户端。客户端必须要进行一些特别的设置才能正向代理
     作用：1.访问原来无法访问的资源，如外网。 2.可以做缓存，加速访问资源 3.对客户端访问授权，上网进行认证。4.代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息


Nginx 反向代理：多个客户端给服务器发送请求，Nginx服务器接受到之后，按照一定规则分发给后端的业务处理服务器进行处理了。内部服务器信息隐藏了
    作用：1.保证内网的安全，通常将反向代理作为公网访问地址，web服务器就是内网。2.负载均衡，通过反向代理服务器来优化网站的负载。 
    
负载均衡：硬件负载均衡和软件负载均衡。客户端发送的、Nginx反向代理服务器接收到的请求量为负载量。请求数量按照一定规则进行分发，到不同的服务器处理的规则，就是均衡规则
     硬件负载均衡：如F5负载均衡，造价贵
     软件负载均衡：利用现有技术结合主机硬件实现的一种消息队列分发机制。
负载均衡调度算法：
      1.weight轮询（默认方法）：接收到的请求按照顺序逐一分配到不同的后端服务器，使用过程中，某一后台服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到影响。一般给不同后端服务器设置一个权重值，
      用于调整不同的服务器上请求的分配率。权重越大，被分配到的机率也越大，该权重值根据实际工作环境不同的后端服务器进行调整。
      2.ip_hash:每个请求按照客户端的ip 的hash结果进行匹配，这样算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这一定程度上解决了集群部署环境下session共享问题。
      3.fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应时间进行均衡分配。响应时间短处理时间效率高的服务器分配到请求概率高，响应时间长处理效率低的服务器分配到的请求少。默认不支持该算法，需要安装
      upstream_fair模块。
      4.url_hash:按照访问的URL的hash结果分配请求，每个请求的URL会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。默认不支持该算法，需要安装Nginx的hash软件包。
 
 
 Nginx配置
 1. 全局块
该部分配置主要影响Nginx全局，通常包括下面几个部分：

配置运行Nginx服务器用户（组）
worker进程数
Nginx进程PID存放路径
错误日志的存放路径
配置文件的引入
...
2. events块
该部分配置主要影响Nginx服务器与用户的网络连接，主要包括：

设置网络连接的序列化
是否允许同时接收多个网络连接
事件驱动模型的选择
最大连接数的配置
...
3. http块
定义MIMI-Type
自定义服务日志
是否允许sendfile方式传输文件
连接超时时间
单连接请求数上限
...
4. server块
配置网络端口监听
访问日志和错误页
基于名称的虚拟主机配置
基于IP的虚拟主机配置
location块配置
...
5. location块
location配置
请求根目录配置
更改location的URI
网站默认首页配置
...
user  nobody  nobody;
worker_processes  3;
error_log  logs/error.log;
pid  logs/nginx.pid;

events {
 use epoll;
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  logs/access.log  main;
    sendfile  on;
    keepalive_timeout  65;

    server {
        listen       8088;
        server_name  codesheep;
        access_log  /codesheep/webserver/server1/log/access.log;
        error_page  404  /404.html;

        location /server1/location1 {
            root   /codesheep/webserver;
            index  index.server2-location1.htm;
        }

        location /server1/location2 {
     root   /codesheep/webserver;
            index  index.server2-location2.htm;
        }

    }

    server {
        listen       8089;
        server_name  192.168.31.177;
        access_log  /codesheep/webserver/server2/log/access.log;
        error_page  404  /404.html;
  
        location /server2/location1 {
            root   /codesheep/webserver;
            index  index.server2-location1.htm;
        }

        location /srv2/loc2 {
            alias   /codesheep/webserver/server2/location2/;
            index  index.server2-location2.htm;
        }
  
        location = /404.html {
         root /codesheep/webserver/;
         index 404.html;
        }
  
    }

}

一、Nginx用户(组)配置
配置项格式：user user [group];

user：指定可以运行Nginx的用户
group：指定可以运行Nginx的用户组（可选项）
如果user指令不配置或者配置为 user nobody nobody ，则默认所有用户都可以启动Nginx进程。

二、worker进程数配置
这是Nginx服务器实现并发处理的关键配置，配置项格式为：

worker_processes number数;

number：Nginx进程最多可以产生的worker process数
如果设置为auto，则Nginx将进行自动检测
按照上文中的配置清单的实验，我们给worker_processes配置的数目是：3，启动Nginx服务器后，我们可以后台看一下主机上的Nginx进程情况：
图片~~~
ps -aux | grep nginx
很明显，理解 worker_processes 这个指令的含义就很容易了


三、error日志路径配置
配置项格式：error_log file [可选日志级别];

file：指定日志输出到某个文件file
常见的可选日志级别包括：info、debug、warn、error...等

四、Nginx进程PID存放路径配置
由于Nginx进程是作为系统守护进程在后台运行，所以该选项用于自定义配置PID文件的保存路径。

配置项格式：pid file;

file：指定其存放路径+文件名称
如果不指定默认置于路径 logs/nginx.pid


五、事件驱动模型配置
配置项格式：use model;

model模型可选择项包括：select、poll、kqueue、epoll、rtsig等......

六、最大连接数配置
配置项格式：worker_connections number数;

number默认值为512，表示允许每一个worker进程可以同时开启的最大连接数。

七、配置文件的引入
该配置主要用于引入其他或者第三方的Nginx配置文件到当前的主配置文件中

配置项格式：include conf_file;

八、网络连接的序列化配置
配置项格式：accept_mutex on;

该配置默认为on状态，表示会对多个Nginx工作进程接收连接进行序列化，防止多个worker进程对连接的争抢。
说到该指令，首先得阐述一下什么是所谓的“惊群问题”。就Nginx的场景来解释的话大致的意思就是：当一个新网络连接来到时，多个worker进程会被同时唤醒，但仅仅只有一个进程可以真正获得连接并处理之。如果每次唤醒的进程数目过多的话，其实是会影响一部分性能的。

所以在这里，如果accept_mutex on，那么多个worker将是以串行方式来处理，其中有一个worker会被唤醒；反之若accept_mutex off，那么所有的worker都会被唤醒，不过只有一个worker能获取新连接，其它的worker会重新进入休眠状态。

这个值的开关与否其实是要和具体场景挂钩的，一定程度上会影响系统的吞吐量。Nginx默认打开了accept_mutex，也算是一种保守的做法。

九、多网络连接 接收配置
配置项格式：multi_accept off;

该配置默认为off，意指每个worker进程一次只能接收一个新到达的网络连接。如果想让每个Nginx的worker process都能同时接收多个网络连接，则需要开启此配置。


十、MIME-Type定义
MIME-Type指的是网络资源的媒体类型，也即前端请求的资源类型。

配置项格式：

include mime.types;

default_type type类型;
include配置用于将mime.types文件包含进来
可以用cat mime.types 来查看mime.types的文件内容，我们发现其就是一个types结构，里面包含了各种浏览器能够识别的MIME类型以及对应类型的文件后缀名，如下所示：



十二、访问日志配置
配置项格式：

access_log path [format];
path：自定义访问日志的路径+名称
format：自定义服务日志的格式（可选项）。


十三、连接超时配置
配置项格式：keepalive_timeout timeout [header_timeout];

timeout 表示server端对连接的保持时间
header_timeout表示在应答报文头部的 Keep-Alive 域设置超时时间，可选项。

十四、sendfile配置
配置项格式：

sendfile on;
sendfile配置用于开启或关闭使用sendfile()系统调用来传输文件，默认off
注：在很多Web Server中，都引入了 sendfile的机制，来实现高性能文件传输。


十五、网络地址监听配置
配置项格式：

第一种：配置监听的IP地址：listen IP[:PORT];
第二种：配置监听的端口：listen PORT;
实际举例：

listen 192.168.31.177:8080; # 监听特定IP和端口上的连接
listen 192.168.31.177;      # 监听特定IP上所有端口的连接
listen 8080;                # 监听特定端口上的所有IP的连接



十六、基于名称或IP的虚拟主机配置
配置项格式：server_name name1 name2 ...

name可以有多个并列名称，而且此处的name支持正则表达式书写
实际举例：

server_name ~^www\.codesheep\d+\.com$;
至于基于IP的虚拟主机配置就更简单了：

配置项格式：server_name IP地址

十七、location配置
配置项格式为：location [ = | ~ | ~* | ^~ ] /uri/ {...}

这里的uri可包含正则表达式的模糊匹配。
uri前面的方括号中的内容是可选项，几种常见的情形如下：

“=”：用于标准uri，进行字符串的精确匹配
“~”：用于正则uri，表示区分大小写的匹配
“~*”：用于正则uri，表示不区分大小写的匹配
“^~”：用于标准uri，^进行前缀匹配，~表示区分大小写



十八、根目录配置
配置项格式：root path;

path：表示Nginx接收到请求以后查找资源的根目录路径
当然，也还可以通过alias指令来更改location接收到的URI请求路径，指令为：

alias path;  # path为修改后的根路径 



十九、默认首页配置
配置项格式：index index_file ......

index_file可以包含多个用空格隔开的文件名，首先找到哪个页面，就使用哪个进行响应。







